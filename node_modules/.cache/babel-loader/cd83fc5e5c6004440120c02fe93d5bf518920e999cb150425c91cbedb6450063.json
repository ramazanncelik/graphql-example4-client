{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Found a \".concat(definition.operation, \" operation\").concat(definition.name ? \" named '\".concat(definition.name.value, \"'\") : '', \". \") + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(44);\n    }\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === 'undefined') {\n    __DEV__ ? invariant(fragments.length === 1, \"Found \".concat(fragments.length, \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\")) : invariant(fragments.length === 1, 45);\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread':\n      {\n        var fragmentName = selection.name.value;\n        if (typeof fragmentMap === \"function\") {\n          return fragmentMap(fragmentName);\n        }\n        var fragment = fragmentMap && fragmentMap[fragmentName];\n        __DEV__ ? invariant(fragment, \"No fragment named \".concat(fragmentName)) : invariant(fragment, 46);\n        return fragment || null;\n      }\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["__assign","__spreadArray","invariant","InvariantError","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","__DEV__","concat","operation","name","value","push","length","query","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sources":["D:/JavaScript/Graphql_Patika/example4/client/node_modules/@apollo/client/utilities/graphql/fragments.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw __DEV__ ? new InvariantError(\"Found a \".concat(definition.operation, \" operation\").concat(definition.name ? \" named '\".concat(definition.name.value, \"'\") : '', \". \") +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(44);\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        __DEV__ ? invariant(fragments.length === 1, \"Found \".concat(fragments.length, \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\")) : invariant(fragments.length === 1, 45);\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case 'InlineFragment':\n            return selection;\n        case 'FragmentSpread': {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            __DEV__ ? invariant(fragment, \"No fragment named \".concat(fragmentName)) : invariant(fragment, 46);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}