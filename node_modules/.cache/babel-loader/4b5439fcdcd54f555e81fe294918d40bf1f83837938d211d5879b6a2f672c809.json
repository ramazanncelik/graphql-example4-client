{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () {\n  return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n      if (id) {\n        var ref = makeReference(id);\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n        return ref;\n      }\n    };\n  }\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n    return false;\n  };\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  };\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n    return obj;\n  };\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n    if (newData) {\n      var __META = newData.__META,\n        rest_1 = __rest(newData, [\"__META\"]);\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  };\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  };\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      var root_1 = this;\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n    return idsToRemove;\n  };\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  };\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n  return EntityStore;\n}();\nexport { EntityStore };\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n  return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n    function Root(_a) {\n      var policies = _a.policies,\n        _b = _a.resultCaching,\n        resultCaching = _b === void 0 ? true : _b,\n        seed = _a.seed;\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n    return Root;\n  }(EntityStore);\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n    var parent = this.parent.removeLayer(layerId);\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n      return parent;\n    }\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n    while (p.parent) p = p.parent;\n    return p.getStorage.apply(p, arguments);\n  };\n  return Layer;\n}(EntityStore);\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n  return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"names":["__assign","__extends","__rest","invariant","dep","equal","Trie","isReference","makeReference","DeepMerger","maybeDeepFreeze","canUseWeakMap","isNonNullObject","hasOwn","fieldNameFromStoreName","DELETE","Object","create","delModifier","INVALIDATE","EntityStore","policies","group","_this","data","rootIds","refs","getFieldValue","objectOrReference","storeFieldName","get","__ref","canRead","objOrRef","has","toReference","objOrIdOrRef","mergeIntoStore","id","identify","ref","merge","prototype","toObject","dataId","lookup","fieldName","depend","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","older","newer","existing","incoming","__DEV__","merged","storeObjectReconciler","caching","fieldsToDirty_1","__exists","keys","forEach","hasKeyArgs","__typename","dirty","modify","fields","changedFields_1","needToMerge_1","allDeleted_1","sharedDetails_1","readField","fieldNameOrOptions","from","store","fieldValue","newValue","storage","getStorage","delete","args","_a","typename","getStoreFieldName","evict","options","limit","evicted","clear","replace","extract","obj","extraRootIds","getRootIdSet","push","length","__META","sort","newData","rest_1","retain","rootId","release","count","ids","Set","add","gc","snapshot","findChildRefIds","idsToRemove","root_1","found_1","root","workSet_1","key","child","makeCacheKey","keyMaker","lookupArray","arguments","CacheGroup","d","resetCaching","makeDepKey","maybeDependOnExistenceOfEntity","entityId","supportsResultCaching","Root","_super","_b","resultCaching","seed","stump","Stump","storageTrie","addLayer","layerId","replay","removeLayer","ownStoreObject","parentStoreObject","fromParent","p","apply","existingObject","incomingObject","property","existingValue","incomingValue"],"sources":["D:/JavaScript/Graphql_Patika/example4/client/node_modules/@apollo/client/cache/inmemory/entityStore.js"],"sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar INVALIDATE = Object.create(null);\nvar EntityStore = (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)\n            ? _this.get(objectOrReference.__ref, storeFieldName)\n            : objectOrReference && objectOrReference[storeFieldName]); };\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef)\n                ? _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return makeReference(objOrIdOrRef);\n            }\n            if (isReference(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        if (hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function (older, newer) {\n        var _this = this;\n        var dataId;\n        if (isReference(older))\n            older = older.__ref;\n        if (isReference(newer))\n            newer = newer.__ref;\n        var existing = typeof older === \"string\"\n            ? this.lookup(dataId = older)\n            : older;\n        var incoming = typeof newer === \"string\"\n            ? this.lookup(dataId = newer)\n            : newer;\n        if (!incoming)\n            return;\n        __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        if (fieldName !== storeFieldName &&\n                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename &&\n                    !(existing && existing.__typename) &&\n                    this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                    fieldName: fieldNameOrOptions,\n                    from: from || makeReference(dataId),\n                } : fieldNameOrOptions, { store: _this }); },\n            };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\"\n                    ? fields\n                    : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE :\n                        modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                    else {\n                        if (newValue === DELETE)\n                            newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args\n                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function () {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function (id) {\n            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = { extraRootIds: extraRootIds.sort() };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = __rest(newData, [\"__META\"]);\n            Object.keys(rest_1).forEach(function (dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        else {\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root)\n                return found_1;\n            var workSet_1 = new Set([root]);\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                if (isNonNullObject(obj)) {\n                    Object.keys(obj).forEach(function (key) {\n                        var child = obj[key];\n                        if (isNonNullObject(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) { parent = null; }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function () {\n        this.d = this.caching ? dep() : null;\n        this.keyMaker = new Trie(canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new Trie(canUseWeakMap);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        Root.prototype.getStorage = function () {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        _this.delete(dataId);\n                    }\n                    else if (!ownStoreObject) {\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    }\n                    else if (ownStoreObject !== parentStoreObject) {\n                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n                            if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function () {\n        var p = this.parent;\n        while (p.parent)\n            p = p.parent;\n        return p.getStorage.apply(p, arguments);\n    };\n    return Layer;\n}(EntityStore));\nvar Stump = (function (_super) {\n    __extends(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function () {\n        return this;\n    };\n    Stump.prototype.merge = function () {\n        return this.parent.merge.apply(this.parent, arguments);\n    };\n    return Stump;\n}(Layer));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n//# sourceMappingURL=entityStore.js.map"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,SAAS,QAAQ,kCAAkC;AAC5D,SAASC,GAAG,QAAQ,UAAU;AAC9B,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,WAAW,EAAEC,aAAa,EAAEC,UAAU,EAAEC,eAAe,EAAEC,aAAa,EAAEC,eAAe,QAAS,0BAA0B;AACnI,SAASC,MAAM,EAAEC,sBAAsB,QAAQ,cAAc;AAC7D,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAChC,IAAIC,WAAW,GAAG,SAAAA,CAAA,EAAY;EAAE,OAAOH,MAAM;AAAE,CAAC;AAChD,IAAII,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AACpC,IAAIG,WAAW,GAAI,YAAY;EAC3B,SAASA,WAAWA,CAACC,QAAQ,EAAEC,KAAK,EAAE;IAClC,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,IAAI,GAAGR,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACQ,OAAO,GAAGT,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAClC,IAAI,CAACS,IAAI,GAAGV,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACU,aAAa,GAAG,UAAUC,iBAAiB,EAAEC,cAAc,EAAE;MAAE,OAAOnB,eAAe,CAACH,WAAW,CAACqB,iBAAiB,CAAC,GACnHL,KAAK,CAACO,GAAG,CAACF,iBAAiB,CAACG,KAAK,EAAEF,cAAc,CAAC,GAClDD,iBAAiB,IAAIA,iBAAiB,CAACC,cAAc,CAAC,CAAC;IAAE,CAAC;IAChE,IAAI,CAACG,OAAO,GAAG,UAAUC,QAAQ,EAAE;MAC/B,OAAO1B,WAAW,CAAC0B,QAAQ,CAAC,GACtBV,KAAK,CAACW,GAAG,CAACD,QAAQ,CAACF,KAAK,CAAC,GACzB,OAAOE,QAAQ,KAAK,QAAQ;IACtC,CAAC;IACD,IAAI,CAACE,WAAW,GAAG,UAAUC,YAAY,EAAEC,cAAc,EAAE;MACvD,IAAI,OAAOD,YAAY,KAAK,QAAQ,EAAE;QAClC,OAAO5B,aAAa,CAAC4B,YAAY,CAAC;MACtC;MACA,IAAI7B,WAAW,CAAC6B,YAAY,CAAC,EAAE;QAC3B,OAAOA,YAAY;MACvB;MACA,IAAIE,EAAE,GAAGf,KAAK,CAACF,QAAQ,CAACkB,QAAQ,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC;MACjD,IAAIE,EAAE,EAAE;QACJ,IAAIE,GAAG,GAAGhC,aAAa,CAAC8B,EAAE,CAAC;QAC3B,IAAID,cAAc,EAAE;UAChBd,KAAK,CAACkB,KAAK,CAACH,EAAE,EAAEF,YAAY,CAAC;QACjC;QACA,OAAOI,GAAG;MACd;IACJ,CAAC;EACL;EACApB,WAAW,CAACsB,SAAS,CAACC,QAAQ,GAAG,YAAY;IACzC,OAAO3C,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACwB,IAAI,CAAC;EAClC,CAAC;EACDJ,WAAW,CAACsB,SAAS,CAACR,GAAG,GAAG,UAAUU,MAAM,EAAE;IAC1C,OAAO,IAAI,CAACC,MAAM,CAACD,MAAM,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC;EAC/C,CAAC;EACDxB,WAAW,CAACsB,SAAS,CAACZ,GAAG,GAAG,UAAUc,MAAM,EAAEE,SAAS,EAAE;IACrD,IAAI,CAACxB,KAAK,CAACyB,MAAM,CAACH,MAAM,EAAEE,SAAS,CAAC;IACpC,IAAIjC,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACxB,IAAI,EAAEoB,MAAM,CAAC,EAAE;MAChC,IAAIK,WAAW,GAAG,IAAI,CAACzB,IAAI,CAACoB,MAAM,CAAC;MACnC,IAAIK,WAAW,IAAIpC,MAAM,CAACmC,IAAI,CAACC,WAAW,EAAEH,SAAS,CAAC,EAAE;QACpD,OAAOG,WAAW,CAACH,SAAS,CAAC;MACjC;IACJ;IACA,IAAIA,SAAS,KAAK,YAAY,IAC1BjC,MAAM,CAACmC,IAAI,CAAC,IAAI,CAAC3B,QAAQ,CAAC6B,iBAAiB,EAAEN,MAAM,CAAC,EAAE;MACtD,OAAO,IAAI,CAACvB,QAAQ,CAAC6B,iBAAiB,CAACN,MAAM,CAAC;IAClD;IACA,IAAI,IAAI,YAAYO,KAAK,EAAE;MACvB,OAAO,IAAI,CAACC,MAAM,CAACtB,GAAG,CAACc,MAAM,EAAEE,SAAS,CAAC;IAC7C;EACJ,CAAC;EACD1B,WAAW,CAACsB,SAAS,CAACG,MAAM,GAAG,UAAUD,MAAM,EAAES,iBAAiB,EAAE;IAChE,IAAIA,iBAAiB,EACjB,IAAI,CAAC/B,KAAK,CAACyB,MAAM,CAACH,MAAM,EAAE,UAAU,CAAC;IACzC,IAAI/B,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACxB,IAAI,EAAEoB,MAAM,CAAC,EAAE;MAChC,OAAO,IAAI,CAACpB,IAAI,CAACoB,MAAM,CAAC;IAC5B;IACA,IAAI,IAAI,YAAYO,KAAK,EAAE;MACvB,OAAO,IAAI,CAACC,MAAM,CAACP,MAAM,CAACD,MAAM,EAAES,iBAAiB,CAAC;IACxD;IACA,IAAI,IAAI,CAAChC,QAAQ,CAAC6B,iBAAiB,CAACN,MAAM,CAAC,EAAE;MACzC,OAAO5B,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC9B;EACJ,CAAC;EACDG,WAAW,CAACsB,SAAS,CAACD,KAAK,GAAG,UAAUa,KAAK,EAAEC,KAAK,EAAE;IAClD,IAAIhC,KAAK,GAAG,IAAI;IAChB,IAAIqB,MAAM;IACV,IAAIrC,WAAW,CAAC+C,KAAK,CAAC,EAClBA,KAAK,GAAGA,KAAK,CAACvB,KAAK;IACvB,IAAIxB,WAAW,CAACgD,KAAK,CAAC,EAClBA,KAAK,GAAGA,KAAK,CAACxB,KAAK;IACvB,IAAIyB,QAAQ,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAClC,IAAI,CAACT,MAAM,CAACD,MAAM,GAAGU,KAAK,CAAC,GAC3BA,KAAK;IACX,IAAIG,QAAQ,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAClC,IAAI,CAACV,MAAM,CAACD,MAAM,GAAGW,KAAK,CAAC,GAC3BA,KAAK;IACX,IAAI,CAACE,QAAQ,EACT;IACJC,OAAO,GAAGvD,SAAS,CAAC,OAAOyC,MAAM,KAAK,QAAQ,EAAE,iCAAiC,CAAC,GAAGzC,SAAS,CAAC,OAAOyC,MAAM,KAAK,QAAQ,EAAE,CAAC,CAAC;IAC7H,IAAIe,MAAM,GAAG,IAAIlD,UAAU,CAACmD,qBAAqB,CAAC,CAACnB,KAAK,CAACe,QAAQ,EAAEC,QAAQ,CAAC;IAC5E,IAAI,CAACjC,IAAI,CAACoB,MAAM,CAAC,GAAGe,MAAM;IAC1B,IAAIA,MAAM,KAAKH,QAAQ,EAAE;MACrB,OAAO,IAAI,CAAC9B,IAAI,CAACkB,MAAM,CAAC;MACxB,IAAI,IAAI,CAACtB,KAAK,CAACuC,OAAO,EAAE;QACpB,IAAIC,eAAe,GAAG9C,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACzC,IAAI,CAACuC,QAAQ,EACTM,eAAe,CAACC,QAAQ,GAAG,CAAC;QAChC/C,MAAM,CAACgD,IAAI,CAACP,QAAQ,CAAC,CAACQ,OAAO,CAAC,UAAUpC,cAAc,EAAE;UACpD,IAAI,CAAC2B,QAAQ,IAAIA,QAAQ,CAAC3B,cAAc,CAAC,KAAK8B,MAAM,CAAC9B,cAAc,CAAC,EAAE;YAClEiC,eAAe,CAACjC,cAAc,CAAC,GAAG,CAAC;YACnC,IAAIiB,SAAS,GAAGhC,sBAAsB,CAACe,cAAc,CAAC;YACtD,IAAIiB,SAAS,KAAKjB,cAAc,IAC5B,CAACN,KAAK,CAACF,QAAQ,CAAC6C,UAAU,CAACP,MAAM,CAACQ,UAAU,EAAErB,SAAS,CAAC,EAAE;cAC1DgB,eAAe,CAAChB,SAAS,CAAC,GAAG,CAAC;YAClC;YACA,IAAIa,MAAM,CAAC9B,cAAc,CAAC,KAAK,KAAK,CAAC,IAAI,EAAEN,KAAK,YAAY4B,KAAK,CAAC,EAAE;cAChE,OAAOQ,MAAM,CAAC9B,cAAc,CAAC;YACjC;UACJ;QACJ,CAAC,CAAC;QACF,IAAIiC,eAAe,CAACK,UAAU,IAC1B,EAAEX,QAAQ,IAAIA,QAAQ,CAACW,UAAU,CAAC,IAClC,IAAI,CAAC9C,QAAQ,CAAC6B,iBAAiB,CAACN,MAAM,CAAC,KAAKe,MAAM,CAACQ,UAAU,EAAE;UAC/D,OAAOL,eAAe,CAACK,UAAU;QACrC;QACAnD,MAAM,CAACgD,IAAI,CAACF,eAAe,CAAC,CAACG,OAAO,CAAC,UAAUnB,SAAS,EAAE;UAAE,OAAOvB,KAAK,CAACD,KAAK,CAAC8C,KAAK,CAACxB,MAAM,EAAEE,SAAS,CAAC;QAAE,CAAC,CAAC;MAC/G;IACJ;EACJ,CAAC;EACD1B,WAAW,CAACsB,SAAS,CAAC2B,MAAM,GAAG,UAAUzB,MAAM,EAAE0B,MAAM,EAAE;IACrD,IAAI/C,KAAK,GAAG,IAAI;IAChB,IAAI0B,WAAW,GAAG,IAAI,CAACJ,MAAM,CAACD,MAAM,CAAC;IACrC,IAAIK,WAAW,EAAE;MACb,IAAIsB,eAAe,GAAGvD,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACzC,IAAIuD,aAAa,GAAG,KAAK;MACzB,IAAIC,YAAY,GAAG,IAAI;MACvB,IAAIC,eAAe,GAAG;QAClB3D,MAAM,EAAEA,MAAM;QACdI,UAAU,EAAEA,UAAU;QACtBZ,WAAW,EAAEA,WAAW;QACxB4B,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BH,OAAO,EAAE,IAAI,CAACA,OAAO;QACrB2C,SAAS,EAAE,SAAAA,CAAUC,kBAAkB,EAAEC,IAAI,EAAE;UAAE,OAAOtD,KAAK,CAACF,QAAQ,CAACsD,SAAS,CAAC,OAAOC,kBAAkB,KAAK,QAAQ,GAAG;YACtH9B,SAAS,EAAE8B,kBAAkB;YAC7BC,IAAI,EAAEA,IAAI,IAAIrE,aAAa,CAACoC,MAAM;UACtC,CAAC,GAAGgC,kBAAkB,EAAE;YAAEE,KAAK,EAAEvD;UAAM,CAAC,CAAC;QAAE;MAC/C,CAAC;MACDP,MAAM,CAACgD,IAAI,CAACf,WAAW,CAAC,CAACgB,OAAO,CAAC,UAAUpC,cAAc,EAAE;QACvD,IAAIiB,SAAS,GAAGhC,sBAAsB,CAACe,cAAc,CAAC;QACtD,IAAIkD,UAAU,GAAG9B,WAAW,CAACpB,cAAc,CAAC;QAC5C,IAAIkD,UAAU,KAAK,KAAK,CAAC,EACrB;QACJ,IAAIV,MAAM,GAAG,OAAOC,MAAM,KAAK,UAAU,GACnCA,MAAM,GACNA,MAAM,CAACzC,cAAc,CAAC,IAAIyC,MAAM,CAACxB,SAAS,CAAC;QACjD,IAAIuB,MAAM,EAAE;UACR,IAAIW,QAAQ,GAAGX,MAAM,KAAKnD,WAAW,GAAGH,MAAM,GAC1CsD,MAAM,CAAC3D,eAAe,CAACqE,UAAU,CAAC,EAAE/E,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE0E,eAAe,CAAC,EAAE;YAAE5B,SAAS,EAAEA,SAAS;YAAEjB,cAAc,EAAEA,cAAc;YAAEoD,OAAO,EAAE1D,KAAK,CAAC2D,UAAU,CAACtC,MAAM,EAAEf,cAAc;UAAE,CAAC,CAAC,CAAC;UAC7L,IAAImD,QAAQ,KAAK7D,UAAU,EAAE;YACzBI,KAAK,CAACD,KAAK,CAAC8C,KAAK,CAACxB,MAAM,EAAEf,cAAc,CAAC;UAC7C,CAAC,MACI;YACD,IAAImD,QAAQ,KAAKjE,MAAM,EACnBiE,QAAQ,GAAG,KAAK,CAAC;YACrB,IAAIA,QAAQ,KAAKD,UAAU,EAAE;cACzBR,eAAe,CAAC1C,cAAc,CAAC,GAAGmD,QAAQ;cAC1CR,aAAa,GAAG,IAAI;cACpBO,UAAU,GAAGC,QAAQ;YACzB;UACJ;QACJ;QACA,IAAID,UAAU,KAAK,KAAK,CAAC,EAAE;UACvBN,YAAY,GAAG,KAAK;QACxB;MACJ,CAAC,CAAC;MACF,IAAID,aAAa,EAAE;QACf,IAAI,CAAC/B,KAAK,CAACG,MAAM,EAAE2B,eAAe,CAAC;QACnC,IAAIE,YAAY,EAAE;UACd,IAAI,IAAI,YAAYtB,KAAK,EAAE;YACvB,IAAI,CAAC3B,IAAI,CAACoB,MAAM,CAAC,GAAG,KAAK,CAAC;UAC9B,CAAC,MACI;YACD,OAAO,IAAI,CAACpB,IAAI,CAACoB,MAAM,CAAC;UAC5B;UACA,IAAI,CAACtB,KAAK,CAAC8C,KAAK,CAACxB,MAAM,EAAE,UAAU,CAAC;QACxC;QACA,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EACDxB,WAAW,CAACsB,SAAS,CAACyC,MAAM,GAAG,UAAUvC,MAAM,EAAEE,SAAS,EAAEsC,IAAI,EAAE;IAC9D,IAAIC,EAAE;IACN,IAAIpC,WAAW,GAAG,IAAI,CAACJ,MAAM,CAACD,MAAM,CAAC;IACrC,IAAIK,WAAW,EAAE;MACb,IAAIqC,QAAQ,GAAG,IAAI,CAAC3D,aAAa,CAACsB,WAAW,EAAE,YAAY,CAAC;MAC5D,IAAIpB,cAAc,GAAGiB,SAAS,IAAIsC,IAAI,GAChC,IAAI,CAAC/D,QAAQ,CAACkE,iBAAiB,CAAC;QAAED,QAAQ,EAAEA,QAAQ;QAAExC,SAAS,EAAEA,SAAS;QAAEsC,IAAI,EAAEA;MAAK,CAAC,CAAC,GACzFtC,SAAS;MACf,OAAO,IAAI,CAACuB,MAAM,CAACzB,MAAM,EAAEf,cAAc,IAAIwD,EAAE,GAAG,CAAC,CAAC,EAChDA,EAAE,CAACxD,cAAc,CAAC,GAAGX,WAAW,EAChCmE,EAAE,IAAInE,WAAW,CAAC;IAC1B;IACA,OAAO,KAAK;EAChB,CAAC;EACDE,WAAW,CAACsB,SAAS,CAAC8C,KAAK,GAAG,UAAUC,OAAO,EAAEC,KAAK,EAAE;IACpD,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIF,OAAO,CAACnD,EAAE,EAAE;MACZ,IAAIzB,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACxB,IAAI,EAAEiE,OAAO,CAACnD,EAAE,CAAC,EAAE;QACpCqD,OAAO,GAAG,IAAI,CAACR,MAAM,CAACM,OAAO,CAACnD,EAAE,EAAEmD,OAAO,CAAC3C,SAAS,EAAE2C,OAAO,CAACL,IAAI,CAAC;MACtE;MACA,IAAI,IAAI,YAAYjC,KAAK,IAAI,IAAI,KAAKuC,KAAK,EAAE;QACzCC,OAAO,GAAG,IAAI,CAACvC,MAAM,CAACoC,KAAK,CAACC,OAAO,EAAEC,KAAK,CAAC,IAAIC,OAAO;MAC1D;MACA,IAAIF,OAAO,CAAC3C,SAAS,IAAI6C,OAAO,EAAE;QAC9B,IAAI,CAACrE,KAAK,CAAC8C,KAAK,CAACqB,OAAO,CAACnD,EAAE,EAAEmD,OAAO,CAAC3C,SAAS,IAAI,UAAU,CAAC;MACjE;IACJ;IACA,OAAO6C,OAAO;EAClB,CAAC;EACDvE,WAAW,CAACsB,SAAS,CAACkD,KAAK,GAAG,YAAY;IACtC,IAAI,CAACC,OAAO,CAAC,IAAI,CAAC;EACtB,CAAC;EACDzE,WAAW,CAACsB,SAAS,CAACoD,OAAO,GAAG,YAAY;IACxC,IAAIvE,KAAK,GAAG,IAAI;IAChB,IAAIwE,GAAG,GAAG,IAAI,CAACpD,QAAQ,EAAE;IACzB,IAAIqD,YAAY,GAAG,EAAE;IACrB,IAAI,CAACC,YAAY,EAAE,CAAChC,OAAO,CAAC,UAAU3B,EAAE,EAAE;MACtC,IAAI,CAACzB,MAAM,CAACmC,IAAI,CAACzB,KAAK,CAACF,QAAQ,CAAC6B,iBAAiB,EAAEZ,EAAE,CAAC,EAAE;QACpD0D,YAAY,CAACE,IAAI,CAAC5D,EAAE,CAAC;MACzB;IACJ,CAAC,CAAC;IACF,IAAI0D,YAAY,CAACG,MAAM,EAAE;MACrBJ,GAAG,CAACK,MAAM,GAAG;QAAEJ,YAAY,EAAEA,YAAY,CAACK,IAAI;MAAG,CAAC;IACtD;IACA,OAAON,GAAG;EACd,CAAC;EACD3E,WAAW,CAACsB,SAAS,CAACmD,OAAO,GAAG,UAAUS,OAAO,EAAE;IAC/C,IAAI/E,KAAK,GAAG,IAAI;IAChBP,MAAM,CAACgD,IAAI,CAAC,IAAI,CAACxC,IAAI,CAAC,CAACyC,OAAO,CAAC,UAAUrB,MAAM,EAAE;MAC7C,IAAI,EAAE0D,OAAO,IAAIzF,MAAM,CAACmC,IAAI,CAACsD,OAAO,EAAE1D,MAAM,CAAC,CAAC,EAAE;QAC5CrB,KAAK,CAAC4D,MAAM,CAACvC,MAAM,CAAC;MACxB;IACJ,CAAC,CAAC;IACF,IAAI0D,OAAO,EAAE;MACT,IAAIF,MAAM,GAAGE,OAAO,CAACF,MAAM;QAAEG,MAAM,GAAGrG,MAAM,CAACoG,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;MACjEtF,MAAM,CAACgD,IAAI,CAACuC,MAAM,CAAC,CAACtC,OAAO,CAAC,UAAUrB,MAAM,EAAE;QAC1CrB,KAAK,CAACkB,KAAK,CAACG,MAAM,EAAE2D,MAAM,CAAC3D,MAAM,CAAC,CAAC;MACvC,CAAC,CAAC;MACF,IAAIwD,MAAM,EAAE;QACRA,MAAM,CAACJ,YAAY,CAAC/B,OAAO,CAAC,IAAI,CAACuC,MAAM,EAAE,IAAI,CAAC;MAClD;IACJ;EACJ,CAAC;EACDpF,WAAW,CAACsB,SAAS,CAAC8D,MAAM,GAAG,UAAUC,MAAM,EAAE;IAC7C,OAAO,IAAI,CAAChF,OAAO,CAACgF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAChF,OAAO,CAACgF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EACjE,CAAC;EACDrF,WAAW,CAACsB,SAAS,CAACgE,OAAO,GAAG,UAAUD,MAAM,EAAE;IAC9C,IAAI,IAAI,CAAChF,OAAO,CAACgF,MAAM,CAAC,GAAG,CAAC,EAAE;MAC1B,IAAIE,KAAK,GAAG,EAAE,IAAI,CAAClF,OAAO,CAACgF,MAAM,CAAC;MAClC,IAAI,CAACE,KAAK,EACN,OAAO,IAAI,CAAClF,OAAO,CAACgF,MAAM,CAAC;MAC/B,OAAOE,KAAK;IAChB;IACA,OAAO,CAAC;EACZ,CAAC;EACDvF,WAAW,CAACsB,SAAS,CAACuD,YAAY,GAAG,UAAUW,GAAG,EAAE;IAChD,IAAIA,GAAG,KAAK,KAAK,CAAC,EAAE;MAAEA,GAAG,GAAG,IAAIC,GAAG,EAAE;IAAE;IACvC7F,MAAM,CAACgD,IAAI,CAAC,IAAI,CAACvC,OAAO,CAAC,CAACwC,OAAO,CAAC2C,GAAG,CAACE,GAAG,EAAEF,GAAG,CAAC;IAC/C,IAAI,IAAI,YAAYzD,KAAK,EAAE;MACvB,IAAI,CAACC,MAAM,CAAC6C,YAAY,CAACW,GAAG,CAAC;IACjC,CAAC,MACI;MACD5F,MAAM,CAACgD,IAAI,CAAC,IAAI,CAAC3C,QAAQ,CAAC6B,iBAAiB,CAAC,CAACe,OAAO,CAAC2C,GAAG,CAACE,GAAG,EAAEF,GAAG,CAAC;IACtE;IACA,OAAOA,GAAG;EACd,CAAC;EACDxF,WAAW,CAACsB,SAAS,CAACqE,EAAE,GAAG,YAAY;IACnC,IAAIxF,KAAK,GAAG,IAAI;IAChB,IAAIqF,GAAG,GAAG,IAAI,CAACX,YAAY,EAAE;IAC7B,IAAIe,QAAQ,GAAG,IAAI,CAACrE,QAAQ,EAAE;IAC9BiE,GAAG,CAAC3C,OAAO,CAAC,UAAU3B,EAAE,EAAE;MACtB,IAAIzB,MAAM,CAACmC,IAAI,CAACgE,QAAQ,EAAE1E,EAAE,CAAC,EAAE;QAC3BtB,MAAM,CAACgD,IAAI,CAACzC,KAAK,CAAC0F,eAAe,CAAC3E,EAAE,CAAC,CAAC,CAAC2B,OAAO,CAAC2C,GAAG,CAACE,GAAG,EAAEF,GAAG,CAAC;QAC5D,OAAOI,QAAQ,CAAC1E,EAAE,CAAC;MACvB;IACJ,CAAC,CAAC;IACF,IAAI4E,WAAW,GAAGlG,MAAM,CAACgD,IAAI,CAACgD,QAAQ,CAAC;IACvC,IAAIE,WAAW,CAACf,MAAM,EAAE;MACpB,IAAIgB,MAAM,GAAG,IAAI;MACjB,OAAOA,MAAM,YAAYhE,KAAK,EAC1BgE,MAAM,GAAGA,MAAM,CAAC/D,MAAM;MAC1B8D,WAAW,CAACjD,OAAO,CAAC,UAAU3B,EAAE,EAAE;QAAE,OAAO6E,MAAM,CAAChC,MAAM,CAAC7C,EAAE,CAAC;MAAE,CAAC,CAAC;IACpE;IACA,OAAO4E,WAAW;EACtB,CAAC;EACD9F,WAAW,CAACsB,SAAS,CAACuE,eAAe,GAAG,UAAUrE,MAAM,EAAE;IACtD,IAAI,CAAC/B,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACtB,IAAI,EAAEkB,MAAM,CAAC,EAAE;MACjC,IAAIwE,OAAO,GAAG,IAAI,CAAC1F,IAAI,CAACkB,MAAM,CAAC,GAAG5B,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACrD,IAAIoG,IAAI,GAAG,IAAI,CAAC7F,IAAI,CAACoB,MAAM,CAAC;MAC5B,IAAI,CAACyE,IAAI,EACL,OAAOD,OAAO;MAClB,IAAIE,SAAS,GAAG,IAAIT,GAAG,CAAC,CAACQ,IAAI,CAAC,CAAC;MAC/BC,SAAS,CAACrD,OAAO,CAAC,UAAU8B,GAAG,EAAE;QAC7B,IAAIxF,WAAW,CAACwF,GAAG,CAAC,EAAE;UAClBqB,OAAO,CAACrB,GAAG,CAAChE,KAAK,CAAC,GAAG,IAAI;QAC7B;QACA,IAAInB,eAAe,CAACmF,GAAG,CAAC,EAAE;UACtB/E,MAAM,CAACgD,IAAI,CAAC+B,GAAG,CAAC,CAAC9B,OAAO,CAAC,UAAUsD,GAAG,EAAE;YACpC,IAAIC,KAAK,GAAGzB,GAAG,CAACwB,GAAG,CAAC;YACpB,IAAI3G,eAAe,CAAC4G,KAAK,CAAC,EAAE;cACxBF,SAAS,CAACR,GAAG,CAACU,KAAK,CAAC;YACxB;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN;IACA,OAAO,IAAI,CAAC9F,IAAI,CAACkB,MAAM,CAAC;EAC5B,CAAC;EACDxB,WAAW,CAACsB,SAAS,CAAC+E,YAAY,GAAG,YAAY;IAC7C,OAAO,IAAI,CAACnG,KAAK,CAACoG,QAAQ,CAACC,WAAW,CAACC,SAAS,CAAC;EACrD,CAAC;EACD,OAAOxG,WAAW;AACtB,CAAC,EAAG;AACJ,SAASA,WAAW;AACpB,IAAIyG,UAAU,GAAI,YAAY;EAC1B,SAASA,UAAUA,CAAChE,OAAO,EAAET,MAAM,EAAE;IACjC,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,IAAI;IAAE;IACxC,IAAI,CAACS,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACT,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC0E,CAAC,GAAG,IAAI;IACb,IAAI,CAACC,YAAY,EAAE;EACvB;EACAF,UAAU,CAACnF,SAAS,CAACqF,YAAY,GAAG,YAAY;IAC5C,IAAI,CAACD,CAAC,GAAG,IAAI,CAACjE,OAAO,GAAGzD,GAAG,EAAE,GAAG,IAAI;IACpC,IAAI,CAACsH,QAAQ,GAAG,IAAIpH,IAAI,CAACK,aAAa,CAAC;EAC3C,CAAC;EACDkH,UAAU,CAACnF,SAAS,CAACK,MAAM,GAAG,UAAUH,MAAM,EAAEf,cAAc,EAAE;IAC5D,IAAI,IAAI,CAACiG,CAAC,EAAE;MACR,IAAI,CAACA,CAAC,CAACE,UAAU,CAACpF,MAAM,EAAEf,cAAc,CAAC,CAAC;MAC1C,IAAIiB,SAAS,GAAGhC,sBAAsB,CAACe,cAAc,CAAC;MACtD,IAAIiB,SAAS,KAAKjB,cAAc,EAAE;QAC9B,IAAI,CAACiG,CAAC,CAACE,UAAU,CAACpF,MAAM,EAAEE,SAAS,CAAC,CAAC;MACzC;MACA,IAAI,IAAI,CAACM,MAAM,EAAE;QACb,IAAI,CAACA,MAAM,CAACL,MAAM,CAACH,MAAM,EAAEf,cAAc,CAAC;MAC9C;IACJ;EACJ,CAAC;EACDgG,UAAU,CAACnF,SAAS,CAAC0B,KAAK,GAAG,UAAUxB,MAAM,EAAEf,cAAc,EAAE;IAC3D,IAAI,IAAI,CAACiG,CAAC,EAAE;MACR,IAAI,CAACA,CAAC,CAAC1D,KAAK,CAAC4D,UAAU,CAACpF,MAAM,EAAEf,cAAc,CAAC,EAAEA,cAAc,KAAK,UAAU,GAAG,QAAQ,GAAG,UAAU,CAAC;IAC3G;EACJ,CAAC;EACD,OAAOgG,UAAU;AACrB,CAAC,EAAG;AACJ,SAASG,UAAUA,CAACpF,MAAM,EAAEf,cAAc,EAAE;EACxC,OAAOA,cAAc,GAAG,GAAG,GAAGe,MAAM;AACxC;AACA,OAAO,SAASqF,8BAA8BA,CAACnD,KAAK,EAAEoD,QAAQ,EAAE;EAC5D,IAAIC,qBAAqB,CAACrD,KAAK,CAAC,EAAE;IAC9BA,KAAK,CAACxD,KAAK,CAACyB,MAAM,CAACmF,QAAQ,EAAE,UAAU,CAAC;EAC5C;AACJ;AACA,CAAC,UAAU9G,WAAW,EAAE;EACpB,IAAIgH,IAAI,GAAI,UAAUC,MAAM,EAAE;IAC1BpI,SAAS,CAACmI,IAAI,EAAEC,MAAM,CAAC;IACvB,SAASD,IAAIA,CAAC/C,EAAE,EAAE;MACd,IAAIhE,QAAQ,GAAGgE,EAAE,CAAChE,QAAQ;QAAEiH,EAAE,GAAGjD,EAAE,CAACkD,aAAa;QAAEA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;QAAEE,IAAI,GAAGnD,EAAE,CAACmD,IAAI;MAC5G,IAAIjH,KAAK,GAAG8G,MAAM,CAACrF,IAAI,CAAC,IAAI,EAAE3B,QAAQ,EAAE,IAAIwG,UAAU,CAACU,aAAa,CAAC,CAAC,IAAI,IAAI;MAC9EhH,KAAK,CAACkH,KAAK,GAAG,IAAIC,KAAK,CAACnH,KAAK,CAAC;MAC9BA,KAAK,CAACoH,WAAW,GAAG,IAAIrI,IAAI,CAACK,aAAa,CAAC;MAC3C,IAAI6H,IAAI,EACJjH,KAAK,CAACsE,OAAO,CAAC2C,IAAI,CAAC;MACvB,OAAOjH,KAAK;IAChB;IACA6G,IAAI,CAAC1F,SAAS,CAACkG,QAAQ,GAAG,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACjD,OAAO,IAAI,CAACL,KAAK,CAACG,QAAQ,CAACC,OAAO,EAAEC,MAAM,CAAC;IAC/C,CAAC;IACDV,IAAI,CAAC1F,SAAS,CAACqG,WAAW,GAAG,YAAY;MACrC,OAAO,IAAI;IACf,CAAC;IACDX,IAAI,CAAC1F,SAAS,CAACwC,UAAU,GAAG,YAAY;MACpC,OAAO,IAAI,CAACyD,WAAW,CAAChB,WAAW,CAACC,SAAS,CAAC;IAClD,CAAC;IACD,OAAOQ,IAAI;EACf,CAAC,CAAChH,WAAW,CAAE;EACfA,WAAW,CAACgH,IAAI,GAAGA,IAAI;AAC3B,CAAC,EAAEhH,WAAW,KAAKA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AACrC,IAAI+B,KAAK,GAAI,UAAUkF,MAAM,EAAE;EAC3BpI,SAAS,CAACkD,KAAK,EAAEkF,MAAM,CAAC;EACxB,SAASlF,KAAKA,CAACb,EAAE,EAAEc,MAAM,EAAE0F,MAAM,EAAExH,KAAK,EAAE;IACtC,IAAIC,KAAK,GAAG8G,MAAM,CAACrF,IAAI,CAAC,IAAI,EAAEI,MAAM,CAAC/B,QAAQ,EAAEC,KAAK,CAAC,IAAI,IAAI;IAC7DC,KAAK,CAACe,EAAE,GAAGA,EAAE;IACbf,KAAK,CAAC6B,MAAM,GAAGA,MAAM;IACrB7B,KAAK,CAACuH,MAAM,GAAGA,MAAM;IACrBvH,KAAK,CAACD,KAAK,GAAGA,KAAK;IACnBwH,MAAM,CAACvH,KAAK,CAAC;IACb,OAAOA,KAAK;EAChB;EACA4B,KAAK,CAACT,SAAS,CAACkG,QAAQ,GAAG,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAClD,OAAO,IAAI3F,KAAK,CAAC0F,OAAO,EAAE,IAAI,EAAEC,MAAM,EAAE,IAAI,CAACxH,KAAK,CAAC;EACvD,CAAC;EACD6B,KAAK,CAACT,SAAS,CAACqG,WAAW,GAAG,UAAUF,OAAO,EAAE;IAC7C,IAAItH,KAAK,GAAG,IAAI;IAChB,IAAI6B,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC2F,WAAW,CAACF,OAAO,CAAC;IAC7C,IAAIA,OAAO,KAAK,IAAI,CAACvG,EAAE,EAAE;MACrB,IAAI,IAAI,CAAChB,KAAK,CAACuC,OAAO,EAAE;QACpB7C,MAAM,CAACgD,IAAI,CAAC,IAAI,CAACxC,IAAI,CAAC,CAACyC,OAAO,CAAC,UAAUrB,MAAM,EAAE;UAC7C,IAAIoG,cAAc,GAAGzH,KAAK,CAACC,IAAI,CAACoB,MAAM,CAAC;UACvC,IAAIqG,iBAAiB,GAAG7F,MAAM,CAAC,QAAQ,CAAC,CAACR,MAAM,CAAC;UAChD,IAAI,CAACqG,iBAAiB,EAAE;YACpB1H,KAAK,CAAC4D,MAAM,CAACvC,MAAM,CAAC;UACxB,CAAC,MACI,IAAI,CAACoG,cAAc,EAAE;YACtBzH,KAAK,CAACD,KAAK,CAAC8C,KAAK,CAACxB,MAAM,EAAE,UAAU,CAAC;YACrC5B,MAAM,CAACgD,IAAI,CAACiF,iBAAiB,CAAC,CAAChF,OAAO,CAAC,UAAUpC,cAAc,EAAE;cAC7DN,KAAK,CAACD,KAAK,CAAC8C,KAAK,CAACxB,MAAM,EAAEf,cAAc,CAAC;YAC7C,CAAC,CAAC;UACN,CAAC,MACI,IAAImH,cAAc,KAAKC,iBAAiB,EAAE;YAC3CjI,MAAM,CAACgD,IAAI,CAACgF,cAAc,CAAC,CAAC/E,OAAO,CAAC,UAAUpC,cAAc,EAAE;cAC1D,IAAI,CAACxB,KAAK,CAAC2I,cAAc,CAACnH,cAAc,CAAC,EAAEoH,iBAAiB,CAACpH,cAAc,CAAC,CAAC,EAAE;gBAC3EN,KAAK,CAACD,KAAK,CAAC8C,KAAK,CAACxB,MAAM,EAAEf,cAAc,CAAC;cAC7C;YACJ,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;MACA,OAAOuB,MAAM;IACjB;IACA,IAAIA,MAAM,KAAK,IAAI,CAACA,MAAM,EACtB,OAAO,IAAI;IACf,OAAOA,MAAM,CAACwF,QAAQ,CAAC,IAAI,CAACtG,EAAE,EAAE,IAAI,CAACwG,MAAM,CAAC;EAChD,CAAC;EACD3F,KAAK,CAACT,SAAS,CAACC,QAAQ,GAAG,YAAY;IACnC,OAAO3C,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACoD,MAAM,CAACT,QAAQ,EAAE,CAAC,EAAE,IAAI,CAACnB,IAAI,CAAC;EACpE,CAAC;EACD2B,KAAK,CAACT,SAAS,CAACuE,eAAe,GAAG,UAAUrE,MAAM,EAAE;IAChD,IAAIsG,UAAU,GAAG,IAAI,CAAC9F,MAAM,CAAC6D,eAAe,CAACrE,MAAM,CAAC;IACpD,OAAO/B,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACxB,IAAI,EAAEoB,MAAM,CAAC,GAAG5C,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEkJ,UAAU,CAAC,EAAEb,MAAM,CAAC3F,SAAS,CAACuE,eAAe,CAACjE,IAAI,CAAC,IAAI,EAAEJ,MAAM,CAAC,CAAC,GAAGsG,UAAU;EAChJ,CAAC;EACD/F,KAAK,CAACT,SAAS,CAACwC,UAAU,GAAG,YAAY;IACrC,IAAIiE,CAAC,GAAG,IAAI,CAAC/F,MAAM;IACnB,OAAO+F,CAAC,CAAC/F,MAAM,EACX+F,CAAC,GAAGA,CAAC,CAAC/F,MAAM;IAChB,OAAO+F,CAAC,CAACjE,UAAU,CAACkE,KAAK,CAACD,CAAC,EAAEvB,SAAS,CAAC;EAC3C,CAAC;EACD,OAAOzE,KAAK;AAChB,CAAC,CAAC/B,WAAW,CAAE;AACf,IAAIsH,KAAK,GAAI,UAAUL,MAAM,EAAE;EAC3BpI,SAAS,CAACyI,KAAK,EAAEL,MAAM,CAAC;EACxB,SAASK,KAAKA,CAACrB,IAAI,EAAE;IACjB,OAAOgB,MAAM,CAACrF,IAAI,CAAC,IAAI,EAAE,mBAAmB,EAAEqE,IAAI,EAAE,YAAY,CAAE,CAAC,EAAE,IAAIQ,UAAU,CAACR,IAAI,CAAC/F,KAAK,CAACuC,OAAO,EAAEwD,IAAI,CAAC/F,KAAK,CAAC,CAAC,IAAI,IAAI;EAChI;EACAoH,KAAK,CAAChG,SAAS,CAACqG,WAAW,GAAG,YAAY;IACtC,OAAO,IAAI;EACf,CAAC;EACDL,KAAK,CAAChG,SAAS,CAACD,KAAK,GAAG,YAAY;IAChC,OAAO,IAAI,CAACW,MAAM,CAACX,KAAK,CAAC2G,KAAK,CAAC,IAAI,CAAChG,MAAM,EAAEwE,SAAS,CAAC;EAC1D,CAAC;EACD,OAAOc,KAAK;AAChB,CAAC,CAACvF,KAAK,CAAE;AACT,SAASS,qBAAqBA,CAACyF,cAAc,EAAEC,cAAc,EAAEC,QAAQ,EAAE;EACrE,IAAIC,aAAa,GAAGH,cAAc,CAACE,QAAQ,CAAC;EAC5C,IAAIE,aAAa,GAAGH,cAAc,CAACC,QAAQ,CAAC;EAC5C,OAAOlJ,KAAK,CAACmJ,aAAa,EAAEC,aAAa,CAAC,GAAGD,aAAa,GAAGC,aAAa;AAC9E;AACA,OAAO,SAAStB,qBAAqBA,CAACrD,KAAK,EAAE;EACzC,OAAO,CAAC,EAAEA,KAAK,YAAY1D,WAAW,IAAI0D,KAAK,CAACxD,KAAK,CAACuC,OAAO,CAAC;AAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}