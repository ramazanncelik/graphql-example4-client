{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    preferredFetch = linkOptions.fetch,\n    _b = linkOptions.print,\n    print = _b === void 0 ? defaultPrinter : _b,\n    includeExtensions = linkOptions.includeExtensions,\n    preserveHeaderCase = linkOptions.preserveHeaderCase,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _c = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _c === void 0 ? false : _c,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers = options.headers || {};\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observer);\n        } else {\n          return readJsonBody(response, operation, observer);\n        }\n      }).catch(function (err) {\n        return handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"names":["__assign","__rest","visit","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","readJsonBody","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","backupFetch","fetch","createHttpLink","linkOptions","_a","uri","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","contextHeaders","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","value","size","forEach","controller","signal","_controller","definitionIsMutation","d","definitions","some","method","accept","_d","newURI","parseError","observer","currentFetch","then","response","setContext","ctype","get","test","catch","err","abort"],"sources":["D:/JavaScript/Graphql_Patika/example4/client/node_modules/@apollo/client/link/http/createHttpLink.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () { return fetch; });\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (__DEV__) {\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            var unusedNames_1 = new Set(Object.keys(body.variables));\n            visit(operation.query, {\n                Variable: function (node, _key, parent) {\n                    if (parent && parent.kind !== 'VariableDefinition') {\n                        unusedNames_1.delete(node.name.value);\n                    }\n                },\n            });\n            if (unusedNames_1.size) {\n                body.variables = __assign({}, body.variables);\n                unusedNames_1.forEach(function (name) {\n                    delete body.variables[name];\n                });\n            }\n        }\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (hasDirectives(['defer'], operation.query)) {\n            options.headers = options.headers || {};\n            options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            var currentFetch = preferredFetch || maybe(function () { return fetch; }) || backupFetch;\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                var _a;\n                operation.setContext({ response: response });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return readMultipartBody(response, observer);\n                }\n                else {\n                    return readJsonBody(response, operation, observer);\n                }\n            })\n                .catch(function (err) { return handleError(err, observer); });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n//# sourceMappingURL=createHttpLink.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}